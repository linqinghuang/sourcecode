C51 COMPILER V9.55   MAIN                                                                  06/04/2016 14:11:54 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Software\keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          extern unsigned char quiet=1;
   2          extern unsigned char baoqi=1;
   3          extern unsigned char zongkaiguan=1;   //刚开始要关掉声音
   4          #include <reg52.h>
   5          #include <intrins.h>
   6          #include "nrf24l01.h"
   7          #include "12864.h"
   8          #define uchar unsigned char
   9          #define uint unsigned int
  10          
  11          const uchar TX_ADDRESS[TX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址
  12          const uchar RX_ADDRESS[RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址
  13          sbit CE=P3^0;
  14          sbit CSN=P3^1;
  15          sbit IRQ=P3^2;
  16          sbit MOSI=P3^3;     //可以修改
  17          sbit MISO=P3^4;
  18          //sbit SCK=P2^5;   
  19          sbit SCK=P1^4; // 自己修改的  
  20          
  21          uchar RxBuf[32];
  22          uchar datedisplay[9];
  23          /*void delay(uint z)
  24          {
  25            uint x,y;
  26            for(x=z;x>0;x--)
  27              for(y=110;y>0;y--);
  28          } *
  29          
  30          /**************************************************
  31          函数: init_io()
  32          
  33          描述:
  34              初始化IO
  35          /**************************************************/
  36          void init_io(void)
  37          {
  38   1        CE  = 0;        // 待机
  39   1        CSN = 1;        // SPI禁止
  40   1        SCK = 0;        // SPI时钟置低
  41   1        IRQ = 1;        // 中断复位
  42   1      }
  43          /**************************************************/
  44          
  45          
  46          /**************************************************
  47          函数：SPI_RW()
  48          
  49          描述：
  50              根据SPI协议，写一字节数据到nRF24L01，同时从nRF24L01
  51            读出一字节
  52          /**************************************************/
  53          uchar SPI_RW(uchar byte)
  54          {
  55   1        uchar i;
C51 COMPILER V9.55   MAIN                                                                  06/04/2016 14:11:54 PAGE 2   

  56   1          for(i=0; i<8; i++)          // 循环8次
  57   1          {
  58   2            MOSI = (byte & 0x80);   // byte最高位输出到MOSI
  59   2            byte <<= 1;             // 低一位移位到最高位
  60   2            SCK = 1;                // 拉高SCK，nRF24L01从MOSI读入1位数据，同时从MISO输出1位数据
  61   2            byte |= MISO;         // 读MISO到byte最低位
  62   2            SCK = 0;              // SCK置低
  63   2          }
  64   1          return(byte);             // 返回读出的一字节
  65   1      }
  66          /**************************************************/
  67          
  68          /**************************************************
  69          函数：SPI_RW_Reg()
  70          
  71          描述：
  72              写数据value到reg寄存器
  73          /**************************************************/
  74          uchar SPI_RW_Reg(uchar reg, uchar value)
  75          {
  76   1        uchar status;
  77   1          CSN = 0;                   // CSN置低，开始传输数据
  78   1          status = SPI_RW(reg);      // 选择寄存器，同时返回状态字
  79   1          SPI_RW(value);             // 然后写数据到该寄存器
  80   1          CSN = 1;                   // CSN拉高，结束数据传输
  81   1          return(status);            // 返回状态寄存器
  82   1      }
  83          /**************************************************/
  84          
  85          
  86          /**************************************************
  87          函数：SPI_Read()
  88          
  89          描述：
  90              从reg寄存器读一字节
  91          /**************************************************/
  92          uchar SPI_Read(uchar reg)
  93          {
  94   1        uchar reg_val;
  95   1          CSN = 0;                    // CSN置低，开始传输数据
  96   1          SPI_RW(reg);                // 选择寄存器
  97   1          reg_val = SPI_RW(0XFF);        // 然后从该寄存器读数据      0
  98   1          CSN = 1;                    // CSN拉高，结束数据传输
  99   1          return(reg_val);            // 返回寄存器数据
 100   1      }
 101          /**************************************************/
 102          
 103          /**************************************************
 104          函数：SPI_Read_Buf()
 105          
 106          描述：
 107              从reg寄存器读出bytes个字节，通常用来读取接收通道
 108            数据或接收/发送地址
 109          /**************************************************/
 110          uchar SPI_Read_Buf(uchar reg, uchar * pBuf, uchar bytes)
 111          {
 112   1        uchar status, i;
 113   1          CSN = 0;                    // CSN置低，开始传输数据
 114   1          status = SPI_RW(reg);       // 选择寄存器，同时返回状态字
 115   1          for(i=0; i<bytes; i++)
 116   1            pBuf[i] = SPI_RW(0);    // 逐个字节从nRF24L01读出
 117   1          CSN = 1;                    // CSN拉高，结束数据传输
C51 COMPILER V9.55   MAIN                                                                  06/04/2016 14:11:54 PAGE 3   

 118   1          return(status);             // 返回状态寄存器
 119   1      }
 120          /**************************************************/
 121          
 122          /**************************************************
 123          函数：SPI_Write_Buf()
 124          
 125          描述：
 126              把pBuf缓存中的数据写入到nRF24L01，通常用来写入发
 127            射通道数据或接收/发送地址
 128          /**************************************************/
 129          uchar SPI_Write_Buf(uchar reg, uchar * pBuf, uchar bytes)
 130          {
 131   1        uchar status, i;
 132   1          CSN = 0;                    // CSN置低，开始传输数据
 133   1          status = SPI_RW(reg);       // 选择寄存器，同时返回状态字
 134   1          for(i=0; i<bytes; i++)
 135   1            SPI_RW(pBuf[i]);        // 逐个字节写入nRF24L01
 136   1          CSN = 1;                    // CSN拉高，结束数据传输
 137   1          return(status);             // 返回状态寄存器
 138   1      }
 139          /**************************************************/
 140          
 141          //检测24L01是否存在
 142          //返回值:0，成功;1，失败  
 143          uchar NRF_Check(void)
 144          {
 145   1        uchar buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 146   1        uchar i;
 147   1        SPI_Write_Buf(WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址. 
 148   1        SPI_Read_Buf(TX_ADDR,buf,5); //读出写入的地址  
 149   1        for(i=0;i<5;i++)if(buf[i]!=0XA5)break;                   
 150   1        if(i!=5)return 1;//检测24L01错误  
 151   1        return 0;    //检测到24L01
 152   1      }
 153          //该函数初始化NRF24L01到RX模式
 154          //设置RX地址,写RX数据宽度,选择RF频道,波特率和LNA HCURR
 155          //当CE变高后,即进入RX模式,并可以接收数据了       
 156          void RX_Mode(void)
 157          {
 158   1        CE=0;   
 159   1          SPI_Write_Buf(WRITE_REG+RX_ADDR_P0,(uchar*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址
 160   1          
 161   1          SPI_RW_Reg(WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答    
 162   1          SPI_RW_Reg(WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址     
 163   1          SPI_RW_Reg(WRITE_REG+RF_CH,40);      //设置RF通信频率     
 164   1          SPI_RW_Reg(WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度       
 165   1          SPI_RW_Reg(WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   
 166   1          SPI_RW_Reg(WRITE_REG+CONFIG, 0x0f);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式 
 167   1          CE = 1; //CE为高,进入接收模式 
 168   1      } 
 169          //启动NRF24L01发送一次数据
 170          //txbuf:待发送数据首地址
 171          //返回值:0，接收完成；其他，错误代码
 172          uchar NRF24L01_RxPacket(uchar *rxbuf)
 173          {
 174   1        uchar sta;                         
 175   1        sta=SPI_Read(STATUS);  //读取状态寄存器的值      
 176   1        SPI_RW_Reg(WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 177   1        if(sta&RX_OK)//接收到数据
 178   1        {
 179   2          SPI_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
C51 COMPILER V9.55   MAIN                                                                  06/04/2016 14:11:54 PAGE 4   

 180   2          SPI_RW_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 
 181   2          return 0; 
 182   2        }    
 183   1        return 1;//没收到任何数据
 184   1      }
 185          void main()
 186          {
 187   1        unsigned char testdisplay[8]={'1','1','1','1','1','1','1','1'};
 188   1        uchar i; //自己加的
 189   1      //  uchar datedisplay[7];
 190   1        init_io();
 191   1        P0=0x00;//屏蔽数码管
 192   1         delay(10);                 //延时
 193   1      //    wela=0;
 194   1      //  dula=0; 
 195   1      //  inte();
 196   1       lcd_init2(); 
 197   1        lcd12864(testdisplay);
 198   1        /******************自己加的**************************/
 199   1        while(NRF_Check()); 
 200   1      
 201   1        RX_Mode();//  
 202   1        interface();
 203   1        while(NRF24L01_RxPacket(RxBuf)!=0);
 204   1        while(1)
 205   1        {
 206   2          if(NRF24L01_RxPacket(RxBuf)==0)   
 207   2          {
 208   3            for(i=0;i<8;i++)
 209   3            datedisplay[i]=RxBuf[i];  
 210   3          }
 211   2      
 212   2        checkbutton();
 213   2        lcd12864(datedisplay);
 214   2      
 215   2        }   
 216   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1140    ----
   CONSTANT SIZE    =    149    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     60      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
