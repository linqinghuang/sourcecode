C51 COMPILER V9.00   MAIN                                                                  08/11/2014 20:02:07 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: E:\keil uvision4\anzhuang\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          extern unsigned char quiet=1;
   2          extern unsigned char baoqi=1;
   3          extern unsigned char zongkaiguan=1;       //刚开始要关掉声音
   4          #include <reg52.h>
   5          #include <intrins.h>
   6          #include "nrf24l01.h"
   7          #include "lcedisplayheadfile.h"
   8          #define uchar unsigned char
   9          #define uint unsigned int
  10          
  11          const uchar TX_ADDRESS[TX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址
  12          const uchar RX_ADDRESS[RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址
  13          sbit CE=P2^0;
  14          sbit CSN=P2^1;
  15          sbit IRQ=P2^2;
  16          sbit MOSI=P1^1;           //可以修改
  17          sbit MISO=P2^4;
  18          //sbit SCK=P2^5;         
  19          sbit SCK=P1^0; // 自己修改的    
  20          sbit LED=P1^7;
  21          
  22          uchar RxBuf[32];
  23          uchar datedisplay[9];
  24          /*void delay(uint z)
  25          {
  26                  uint x,y;
  27                  for(x=z;x>0;x--)
  28                          for(y=110;y>0;y--);
  29          }       *
  30          
  31          /**************************************************
  32          函数: init_io()
  33          
  34          描述:
  35              初始化IO
  36          /**************************************************/
  37          void init_io(void)
  38          {
  39   1              CE  = 0;        // 待机
  40   1              CSN = 1;        // SPI禁止
  41   1              SCK = 0;        // SPI时钟置低
  42   1              IRQ = 1;        // 中断复位
  43   1      }
  44          /**************************************************/
  45          
  46          
  47          /**************************************************
  48          函数：SPI_RW()
  49          
  50          描述：
  51              根据SPI协议，写一字节数据到nRF24L01，同时从nRF24L01
  52                  读出一字节
  53          /**************************************************/
  54          uchar SPI_RW(uchar byte)
  55          {
C51 COMPILER V9.00   MAIN                                                                  08/11/2014 20:02:07 PAGE 2   

  56   1              uchar i;
  57   1              for(i=0; i<8; i++)          // 循环8次
  58   1              {
  59   2                      MOSI = (byte & 0x80);   // byte最高位输出到MOSI
  60   2                      byte <<= 1;             // 低一位移位到最高位
  61   2                      SCK = 1;                // 拉高SCK，nRF24L01从MOSI读入1位数据，同时从MISO输出1位数据
  62   2                      byte |= MISO;           // 读MISO到byte最低位
  63   2                      SCK = 0;                // SCK置低
  64   2              }
  65   1          return(byte);               // 返回读出的一字节
  66   1      }
  67          /**************************************************/
  68          
  69          /**************************************************
  70          函数：SPI_RW_Reg()
  71          
  72          描述：
  73              写数据value到reg寄存器
  74          /**************************************************/
  75          uchar SPI_RW_Reg(uchar reg, uchar value)
  76          {
  77   1              uchar status;
  78   1              CSN = 0;                   // CSN置低，开始传输数据
  79   1              status = SPI_RW(reg);      // 选择寄存器，同时返回状态字
  80   1              SPI_RW(value);             // 然后写数据到该寄存器
  81   1              CSN = 1;                   // CSN拉高，结束数据传输
  82   1              return(status);            // 返回状态寄存器
  83   1      }
  84          /**************************************************/
  85          
  86          
  87          /**************************************************
  88          函数：SPI_Read()
  89          
  90          描述：
  91              从reg寄存器读一字节
  92          /**************************************************/
  93          uchar SPI_Read(uchar reg)
  94          {
  95   1              uchar reg_val;
  96   1              CSN = 0;                    // CSN置低，开始传输数据
  97   1              SPI_RW(reg);                // 选择寄存器
  98   1              reg_val = SPI_RW(0XFF);        // 然后从该寄存器读数据            0
  99   1              CSN = 1;                    // CSN拉高，结束数据传输
 100   1              return(reg_val);            // 返回寄存器数据
 101   1      }
 102          /**************************************************/
 103          
 104          /**************************************************
 105          函数：SPI_Read_Buf()
 106          
 107          描述：
 108              从reg寄存器读出bytes个字节，通常用来读取接收通道
 109                  数据或接收/发送地址
 110          /**************************************************/
 111          uchar SPI_Read_Buf(uchar reg, uchar * pBuf, uchar bytes)
 112          {
 113   1              uchar status, i;
 114   1              CSN = 0;                    // CSN置低，开始传输数据
 115   1              status = SPI_RW(reg);       // 选择寄存器，同时返回状态字
 116   1              for(i=0; i<bytes; i++)
 117   1              pBuf[i] = SPI_RW(0);    // 逐个字节从nRF24L01读出
C51 COMPILER V9.00   MAIN                                                                  08/11/2014 20:02:07 PAGE 3   

 118   1              CSN = 1;                    // CSN拉高，结束数据传输
 119   1              return(status);             // 返回状态寄存器
 120   1      }
 121          /**************************************************/
 122          
 123          /**************************************************
 124          函数：SPI_Write_Buf()
 125          
 126          描述：
 127              把pBuf缓存中的数据写入到nRF24L01，通常用来写入发
 128                  射通道数据或接收/发送地址
 129          /**************************************************/
 130          uchar SPI_Write_Buf(uchar reg, uchar * pBuf, uchar bytes)
 131          {
 132   1              uchar status, i;
 133   1              CSN = 0;                    // CSN置低，开始传输数据
 134   1              status = SPI_RW(reg);       // 选择寄存器，同时返回状态字
 135   1              for(i=0; i<bytes; i++)
 136   1              SPI_RW(pBuf[i]);        // 逐个字节写入nRF24L01
 137   1              CSN = 1;                    // CSN拉高，结束数据传输
 138   1              return(status);             // 返回状态寄存器
 139   1      }
 140          /**************************************************/
 141          
 142          //检测24L01是否存在
 143          //返回值:0，成功;1，失败        
 144          uchar NRF_Check(void)
 145          {
 146   1              uchar buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 147   1              uchar i;
 148   1              SPI_Write_Buf(WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.     
 149   1              SPI_Read_Buf(TX_ADDR,buf,5); //读出写入的地址  
 150   1              for(i=0;i<5;i++)if(buf[i]!=0XA5)break;                                                             
 151   1              if(i!=5)return 1;//检测24L01错误        
 152   1              return 0;                //检测到24L01
 153   1      }
 154          //该函数初始化NRF24L01到RX模式
 155          //设置RX地址,写RX数据宽度,选择RF频道,波特率和LNA HCURR
 156          //当CE变高后,即进入RX模式,并可以接收数据了                 
 157          void RX_Mode(void)
 158          {
 159   1              CE=0;     
 160   1              SPI_Write_Buf(WRITE_REG+RX_ADDR_P0,(uchar*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址
 161   1                
 162   1              SPI_RW_Reg(WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答    
 163   1              SPI_RW_Reg(WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址       
 164   1              SPI_RW_Reg(WRITE_REG+RF_CH,40);      //设置RF通信频率             
 165   1              SPI_RW_Reg(WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度             
 166   1              SPI_RW_Reg(WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   
 167   1              SPI_RW_Reg(WRITE_REG+CONFIG, 0x0f);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式 
 168   1              CE = 1; //CE为高,进入接收模式 
 169   1      }       
 170          //启动NRF24L01发送一次数据
 171          //txbuf:待发送数据首地址
 172          //返回值:0，接收完成；其他，错误代码
 173          uchar NRF24L01_RxPacket(uchar *rxbuf)
 174          {
 175   1              uchar sta;                                                                         
 176   1              sta=SPI_Read(STATUS);  //读取状态寄存器的值      
 177   1              SPI_RW_Reg(WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 178   1              if(sta&RX_OK)//接收到数据
 179   1              {
C51 COMPILER V9.00   MAIN                                                                  08/11/2014 20:02:07 PAGE 4   

 180   2                      SPI_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 181   2                      SPI_RW_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 
 182   2                      return 0; 
 183   2              }          
 184   1              return 1;//没收到任何数据
 185   1      }
 186          void main()
 187          {
 188   1              uchar i; //自己加的
 189   1      //      uchar datedisplay[7];
 190   1              init_io();
 191   1              P0=0x00;//屏蔽数码管
 192   1               delay(10);                 //延时
 193   1          wela=0;
 194   1              dula=0; 
 195   1              inte();
 196   1       //lcd_init2(); 
 197   1              /******************自己加的**************************/
 198   1              while(NRF_Check())
 199   1              {       LED=0;} //检查nrf是否存在
 200   1              LED=1;
 201   1              RX_Mode();//     其后接一个界面显示函数然后是while（！（NRF24L01_RxPacket(RxBuf)==0））；
 202   1      interface();
 203   1              while(NRF24L01_RxPacket(RxBuf)!=0);
 204   1              while(1)
 205   1              {
 206   2                      if(NRF24L01_RxPacket(RxBuf)==0)          //
 207   2                      {
 208   3                              for(i=0;i<8;i++)
 209   3                              datedisplay[i]=RxBuf[i];        //将字符串转换为整形，便于显示  如果使用的是液晶显示，此处不需转换
 210   3                      }
 211   2              //这里加checkbutton
 212   2              checkbutton();
 213   2      //      lcd12864(datedisplay);
 214   2              lcddisplay(datedisplay);
 215   2              }               
 216   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    972    ----
   CONSTANT SIZE    =     96    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
